 Класс Arrays
 import java.util.Arrays
 
 Метод Arrays.toString()
int[] array = {1, 2, 3};
String str = Arrays.toString(array);
Переменная str будет содержать строковое значение:
"[1, 2, 3]"
int[] array = {};
String str = Arrays.toString(array);
Переменная str будет содержать строковое значение:
"[]"
String[] array = {"Привет", "Как", "Дела"};
String str = Arrays.toString(array);
Переменная str будет содержать строковое значение:
"[Привет, Как, Дела]"
__________________________________________
Integer[] array = {1, 2, 3};
String str = Arrays.deepToString(array);
Переменная str будет содержать строковое значение:
"[1, 2, 3]"
int[][] array = { {1, 1}, {2, 2}, {3, 3} };
String str = Arrays.deepToString(array);
Переменная str будет содержать строковое значение:
"[[1, 1], [2, 2], [3, 3]]"
int[][][] array = { {{1, 2, 3}, {1}}, {{}} };
String str = Arrays.deepToString(array);
Переменная str будет содержать строковое значение:
"[[[1, 2, 3], [1]], [[]]]"
_____________________________________________________
Метод Arrays.equals()
int[] x1 = {1, 2, 3};
int[] x2 = {1, 2, 3};
x1.equals(x2);
Метод equals у массивов банально сравнивает ссылки двух массивов.

false (ссылки не равны)
int[] x1 = {1, 2, 3};
int[] x2 = {1, 2, 3};
Arrays.equals(x1, x2);


true (содержимое массивов равно)
int[] x1 = {1, 2, 3};
int[] x2 = {1, 2, 3, 4};
Arrays.equals(x1, x2);


false (содержимое массивов отличается)
___________________________________________
Метод Arrays.deepEquals()
int[][] x1 = {{1, 2, 3}, {4, 5, 6}};
int[][] x2 = {{1, 2, 3}, {4, 5, 6}};
x1.equals(x2);
Метод equals у массивов банально сравнивает ссылки двух массивов.

false (ссылки не равны)
int[][] x1 = {{1, 2, 3}, {4, 5, 6}};
int[][] x2 = {{1, 2, 3}, {4, 5, 6}};
Arrays.equals(x1, x2);
Метод Arrays.equals сравнит x1 и x2 как одномерные массивы, которые хранят ссылки. Ссылки в них хранятся разные.
false (содержимое массивов неравно)
int[][] x1 = {{1, 2, 3}, {4, 5, 6}};
int[][] x2 = {{1, 2, 3}, {4, 5, 6}};
Arrays.deepEquals(x1, x2);


true (содержимое массивов равно)
______________________________________
Метод Arrays.fill()
А еще с помощью метода Arrays.fill() можно заполнить определенным значением не весь массив, а его часть:

Arrays.fill(имя, первый, последний, значение)
Где первый и последний — это номера первой и последней ячеек, которые нужно заполнить.

По старой доброй традиции Java, последний элемент не входит в диапазон.
Пример:

int[] x = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

Arrays.fill(x, 3, 7, 999);


String str = Arrays.toString(x);
______________________________________
Метод Arrays.copyOf()
Создать новый массив нужной длины
Скопировать в него все элементы из первого массива.
Именно это, кстати, и делает метод Arrays.copyOf(). Вот как выглядит его вызов:

тип[] имя2 = Arrays.copyOf(имя, длина);
____
int[] x = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

int[] x2 = Arrays.copyOf(x, 5);
String str2 = Arrays.toString(x2);

int[] x3 = Arrays.copyOf(x, 15);
String str3 = Arrays.toString(x3);


Переменная str2 содержит значение:
"[1, 2, 3, 4, 5]"

Переменная str3 содержит значение:
"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0]"
___________________________________________________
Метод Arrays.copyOfRange()
если вы хотите получить массив длиной 5 из массива длины 10, но чтобы в нем были не первые 5 элементов, а 5 последних?
тип[] имя2 = Arrays.copyOfRange(имя, первый, последний);
Этот метод тоже создает новый массив, но заполняет его данными из произвольного места исходного массива. Где первый и последний — это номера первой и последней ячеек, которые должны быть в новом массиве.

По старой доброй традиции Java, последний элемент не входит в диапазон.
Пример:

int[] x = {11, 12, 13, 14, 15, 16, 17, 18, 19, 20};

int[] x2 = Arrays.copyOfRange(x, 5, 10);
String str2 = Arrays.toString(x2);

int[] x3 = Arrays.copyOfRange(x, 5, 15);
String str3 = Arrays.toString(x3);


Переменная str2 содержит значение:
"[16, 17, 18, 19, 20]"

Переменная str3 содержит значение:
"[16, 17, 18, 19, 20, 0, 0, 0, 0, 0]"
_____________________________________
Метод Arrays.sort()
int[] x = {11, -2, 3, 0, 999, -20, 8, -20, 99, -20};

Arrays.sort(x);

String str = Arrays.toString(x);



Переменная str содержит значение:
"[-20, -20, -20, -2, 0, 3, 8, 11, 99, 999]"
_______________________________________
сортировать можно не только весь массив, но и часть массива.
int[] x = {11, -2, 3, 0, 999, -20, 8, -20, 99, -20};

Arrays.sort(x, 4, 8);
String str = Arrays.toString(x);


Переменная str содержит значение:
"[11, -2, 3, 0, -20, -20, 8, 999, 99, -20]"
_____________________________________________
Метод Arrays.binarySearch()
Это не обычный поиск, а так называемый бинарный поиск. Суть его заключается вот в чем:

Предварительно массив сортируется
Затем средний элемент массива сравнивается с искомым (с тем, который мы ищем).
Если искомый больше среднего, поиск продолжается в правой половине массива.
Если искомый элемент меньше среднего, поиск продолжается в левой половине массива
int index = Arrays.binarySearch(имя, значение);
int[] x = {11, -2, 3, 0, 999, -20, 8, -20, 99, -20};
Arrays.sort(x);

int index1 = Arrays.binarySearch(x, 0);
int index2 = Arrays.binarySearch(x, -20);
int index3 = Arrays.binarySearch(x, 99);
int index4 = Arrays.binarySearch(x, 5);
x содержит:
{-20, -20, -20, -2, 0, 3, 8, 11, 99, 999}

4
1 (также подходили индексы 0 и 2)
8
______________________________________________
