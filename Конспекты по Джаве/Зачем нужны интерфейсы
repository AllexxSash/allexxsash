Когда речь заходит о принципах объектно ориентированного программирования(ООП): полиморфизм, наследование и инкапсуляция. Полезно приводить аналогии из реального мира, ведь именно в этом и есть большой плюс ООП, что мы в программе можем смоделировать часть реальной вселенной.
Зачем нужны интерфейсы:
У мальчика Пети есть Папа  и Мама. От папы Петя унаследовал привычку прихлюпывать когда пьет чай, а от мамы он унаследовал привычку поджимать губы во время чтения. Если по пытаться реализовать эту ситуацию в программу, то получиться у нас три класса:
класс Папа
класс Мама 
класс Петя

У Папы и Мамы есть привычки которые нужно передать Пете. Привычки это какие то действия - так что лучше всего реализовать их в программном мире как методы: 
class Папа {
public void прихлюпывать() {
System.out.println("Хлюп");
}
}

class Мама {
public void поджимать() {
System.out.println("Поджать губки");
}
}


Логично написать код так:
class Петя extends Папа, Мама {
}
 
То есть унаследовать Петю от Папы и Мамы одновременно. Если ты так напишешь, то идея будет на тебя ругаться, потому что в Java нельзя реализовать множественное наследование классов. К слову, в С++ можно, а вот в Java нельзя, потому что с множественным наследованием могут возникнуть большие проблемы: подробно пишут в интернете.
Что бы обойти это нельзя, в Java есть интерфейсы. И для привычек мы придумаем свой интерфейс. Даже два:
interface ПривычкиПапы
interface ПривычкиМамы
Выглядеть они будут так
public interface ПривычкиПапы {
    public void прихлюпывать();
}
public interface ПривычкиМамы {
    public void поджимать();
}
 
В интерфейсе мы привычки только указали, и не описали что они конкретно делают. 
Ответить
0
Павел
Уровень 11, Россия
около 1 часа назад
Потому что конкретную реализацию мы пропишем в классах. Сначала отдадим Папе и Маме их законные привычки.
class Папа implement ПривычкиПапы {

   @Override
    public void прихлюпывать() {
     System.out.println("Хлюп");
   }
}

class Мама implement ПривычкиМамы{

@Override
public void поджимать() {
System.out.println("Поджать губки");
    }
}

 И теперь, абсолютно легально можно передать Пете привычки от Папы и Мамы одновременно
class Петя implement ПривычкиПапы, ПривычкиМамы {

@Override
public void прихлюпывать() {
     System.out.println("Хлюп");
   }

@Override
public void поджимать() {
System.out.println("Поджать губки");
    }
}

То есть множественная реализация (чаще говорят имплементация) в Java вполне возможна.
Если развивать ситуацию дальше, например: ведь у Папы и Мамы наверняка есть привычки которые они не передали Пете, да и у Пети могут быть свои личные привычки. Как эту жизненную Санта-Барбару перенести в плоскость Java вы узнаете в следующих сериях)
